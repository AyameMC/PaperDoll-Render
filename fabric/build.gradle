/*
 *     Highly configurable PaperDoll mod. Forked from Extra Player Renderer.
 *     Copyright (C) 2024-2025  LucunJi(Original author), HappyRespawnanchor
 *
 *     This file is part of Ayame PaperDoll.
 *
 *     Ayame PaperDoll is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Ayame PaperDoll is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with Ayame PaperDoll.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    // Fabric Mod Menu
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    // 集中管理所有需要替换的占位符
    Map<String, Object> placeholders = [
            mod_license                   : project.findProperty('mod_license'),
            mod_version                   : project.version,
            mod_id                        : project.findProperty('mod_id'),
            mod_name                      : project.findProperty('mod_name'),
            mod_homepage_url              : project.findProperty('mod_homepage_url'),
            mod_description               : project.findProperty('mod_description'),
            mod_mixin_config              : project.findProperty('mod_mixin_config'),
            mod_issues_url                : project.findProperty('mod_issues_url'),
            mod_fabric_sources_url        : project.findProperty('mod_fabric_sources_url'),
            fabric_loader_version         : project.findProperty('fabric_loader_version'),
            fabric_minecraft_version_range: project.findProperty('fabric_minecraft_version_range'),
    ]

    // 注册所有占位符为输入属性
    placeholders.each { key, value ->
        inputs.property key, value
    }

    // 应用替换规则
    filesMatching('fabric.mod.json') {
        expand placeholders
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
}